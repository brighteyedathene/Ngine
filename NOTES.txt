======================================================================================
Drawing without VAO
======================================================================================

// 0. copy our vertices array in a buffer for OpenGL to use
glBindBuffer(GL_ARRAY_BUFFER, VBO);
glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

// 1. then set the vertex attributes pointers
glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
glEnableVertexAttribArray(0);  

// 2. use our shader program when we want to render an object
glUseProgram(shaderProgram);

// 3. now draw the object 
someOpenGLFunctionThatDrawsOurTriangle();   

======================================================================================
Drawing with VAO
======================================================================================

// ..:: Initialization code (done once (unless your object frequently changes)) :: ..
// 1. bind Vertex Array Object
glBindVertexArray(VAO);

// 2. copy our vertices array in a buffer for OpenGL to use
glBindBuffer(GL_ARRAY_BUFFER, VBO);
glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

// 3. then set our vertex attributes pointers
glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
glEnableVertexAttribArray(0);  

  
[...]

// ..:: Drawing code (in render loop) :: ..
// 4. draw the object
glUseProgram(shaderProgram);
glBindVertexArray(VAO);
someOpenGLFunctionThatDrawsOurTriangle(); 


======================================================================================
Drawing with different shaders
======================================================================================
// Do this shit to use a different set of shaderz bai!!!
glUseProgram(ShaderProgram_1);
glBindVertexArray(VAO_1);
glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
glBindVertexArray(0); // unbind the vertex array

glUseProgram(ShaderProgram_2);
glBindVertexArray(VAO_2);
glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
glBindVertexArray(0); // unbind the vertex array


======================================================================================
Some stupid shit with uniforms
======================================================================================
float time = glfwGetTime();
float green = (sin(time) / 2.0f) + 0.5f;
int uniColor = glGetUniformLocation(dummyShaderProgram, "uniColor");
glUseProgram(dummyShaderProgram);
glUniform4f(uniColor, 0.0f, green, 0.0f, 1.0f);

======================================================================================
Identity matrix in GLM
======================================================================================
// it is required to initialize matrix types as: 
glm::mat4 mat = glm::mat4(1.0f)

======================================================================================
Transform class usage
======================================================================================
Transform transform;
transform.SetPosition(glm::vec3(0.1, -1, 0));
transform.position.y = 1;

======================================================================================
Input Code
======================================================================================
// translation
if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
	input.f_forward = 1;
if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
	input.f_forward = -1;
if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
	input.f_right = 1;
if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
	input.f_right = -1;
if (glfwGetKey(window, GLFW_KEY_Z) == GLFW_PRESS)
	input.f_up = 1;
if (glfwGetKey(window, GLFW_KEY_X) == GLFW_PRESS)
	input.f_up = -1;

======================================================================================
How many vertex array attributes can you use?
======================================================================================
int n_attributes;
glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &n_attributes);
std::cout << "Maximum number of vertex attributes suppported: " << n_attributes << std::endl;

======================================================================================
Wireframe only
======================================================================================
// to draw wire frame
glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);


======================================================================================
modern art in c++
======================================================================================
vector<Thing> things; // can be any iterable i think

/// ...

for (Thing thing : things)
{
	// do something with thing
}


======================================================================================
Getting mat4 from JointPose
======================================================================================
// turning jointpose elements into mat4
glm::mat4 transMat = glm::translate(glm::mat4(1.0f), trans);
glm::mat4 rotationMat = glm::mat4_cast(rotation);
glm::mat4 scaleMat = glm::scale(glm::mat4(1.0f), scale);
glm::mat4 jointTransform = transMat * rotationMat * scaleMat;


======================================================================================
Vector of Abstract Objects
======================================================================================
https://stackoverflow.com/questions/2160920/why-cant-we-declare-a-stdvectorabstractclass

"You can't instantiate abstract classes, thus a vector of abstract classes can't work.

You can however use a vector of pointers to abstract classes:

	std::vector<IFunnyInterface*> ifVec;

This also allows you to actually use polymorphic behaviour - even if the class wasn't abstract, storing by value would lead to the problem of object slicing."




