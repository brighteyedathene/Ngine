======================================================================================
Drawing without VAO
======================================================================================

// 0. copy our vertices array in a buffer for OpenGL to use
glBindBuffer(GL_ARRAY_BUFFER, VBO);
glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

// 1. then set the vertex attributes pointers
glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
glEnableVertexAttribArray(0);  

// 2. use our shader program when we want to render an object
glUseProgram(shaderProgram);

// 3. now draw the object 
someOpenGLFunctionThatDrawsOurTriangle();   

======================================================================================
Drawing with VAO
======================================================================================

// ..:: Initialization code (done once (unless your object frequently changes)) :: ..
// 1. bind Vertex Array Object
glBindVertexArray(VAO);

// 2. copy our vertices array in a buffer for OpenGL to use
glBindBuffer(GL_ARRAY_BUFFER, VBO);
glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

// 3. then set our vertex attributes pointers
glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
glEnableVertexAttribArray(0);  

  
[...]

// ..:: Drawing code (in render loop) :: ..
// 4. draw the object
glUseProgram(shaderProgram);
glBindVertexArray(VAO);
someOpenGLFunctionThatDrawsOurTriangle(); 


======================================================================================
Drawing with different shaders
======================================================================================
// Do this shit to use a different set of shaderz bai!!!
glUseProgram(ShaderProgram_1);
glBindVertexArray(VAO_1);
glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
glBindVertexArray(0); // unbind the vertex array

glUseProgram(ShaderProgram_2);
glBindVertexArray(VAO_2);
glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
glBindVertexArray(0); // unbind the vertex array


======================================================================================
Some stupid shit with uniforms
======================================================================================
float time = glfwGetTime();
float green = (sin(time) / 2.0f) + 0.5f;
int uniColor = glGetUniformLocation(dummyShaderProgram, "uniColor");
glUseProgram(dummyShaderProgram);
glUniform4f(uniColor, 0.0f, green, 0.0f, 1.0f);

======================================================================================
Identity matrix in GLM
======================================================================================
// it is required to initialize matrix types as: 
glm::mat4 mat = glm::mat4(1.0f)
